

module AbsGram where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Main Block
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt = Empty_S
  deriving (Eq, Ord, Show, Read)

data Bool_literal = True | Fale
  deriving (Eq, Ord, Show, Read)

data Simple_type = Int_T | Bool_T | String_T
  deriving (Eq, Ord, Show, Read)

data Type = TypeArg_type Arg_type | TypeFunc_type Func_type
  deriving (Eq, Ord, Show, Read)

data Arg_type
    = Arg_typeSimple_type Simple_type
    | Arg_typeTuple_type Tuple_type
    | Arg_type1 Ident
  deriving (Eq, Ord, Show, Read)

data Tuple_type = Tuple_T [Type]
  deriving (Eq, Ord, Show, Read)

data Func_type = Func_type1 Func_arg_type Type | Func_type2 Type
  deriving (Eq, Ord, Show, Read)

data Func_arg_type
    = Func_arg_typeArg_type Arg_type | Func_arg_type1 Func_type
  deriving (Eq, Ord, Show, Read)

